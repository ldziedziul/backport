#!/bin/bash

set -e

function usage() {
  echo "This tool backports the latest commit pointed by <source-ref> on the top of <target-branch> by crating a new branch."
  echo "Then it pushes the newly created branch and creates a new PR."
  echo
  echo "Usage: "
  echo "$(basename "$0") <source-ref> <target-branch> [-c | --continue] [-l | --local]"
  echo
  echo "Options:"
  echo "  -l, --local    Skip pushing the branch and creating the PR"
  echo "  -c, --continue Continue backporting after fixing cherry-pick conflict"
  echo
  echo "What does it do:"
  echo "   '$(basename "$0") master upstream/5.2.z' - will perform the following actions:"
  echo "    - create a new branch from upstream/5.2.z"
  echo "    - cherry-pick the latest commit from master and append its message with ' [5.2.z]'"
  echo "    - push the new branch to origin"
  echo "    - create a PR from the new branch to 5.2.z branch with body and labels from the original PR (if found)"
}

check_command() {
  if ! [ -x "$(command -v "$1")" ]; then
    echo "Error: '$1' tool required - $2"
    exit 2
  fi
}

check_command "gh" "https://cli.github.com/"
check_command "jq" "https://jqlang.github.io/jq/download/"

if [[ $# -lt 2 || $# -gt 4 ]]; then
  usage
  exit 1
fi

get_opts() {
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
    -c | --continue)
      CONTINUE=yes
      shift
      ;;
    -l | --local)
      LOCAL=yes
      shift
      ;;
    -h | --help)
      usage
      exit
      ;;
    *)
      shift
      ;;
    esac
  done
}

if command -v tput &>/dev/null && tty -s; then
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  MAGENTA=$(tput setaf 5)
  NORMAL=$(tput sgr0)
  BOLD=$(tput bold)
else
  RED=$(echo -en "\e[31m")
  GREEN=$(echo -en "\e[32m")
  YELLOW=$(echo -en "\e[33m")
  MAGENTA=$(echo -en "\e[35m")
  NORMAL=$(echo -en "\e[00m")
  BOLD=$(echo -en "\e[01m")
fi

log_info() {
  printf "${GREEN}%s${NORMAL}\n" "$@" >&2
}

log_warn() {
  printf "${YELLOW}%s${NORMAL}\n" "$@" >&2
}

log_error() {
  printf "${RED}%s${NORMAL}\n" "$@" >&2
}

# shellcheck disable=SC2048
# shellcheck disable=SC2086
get_opts $*

SOURCE=$1
TARGET=$2

# SUFFIX can be 5.2.3, 5.1.z, etc
SUFFIX="${TARGET##*/}"

log_info "Backporting the last commit from $SOURCE onto $TARGET"

COMMIT_MSG=$(git show -s --format='%s' "$SOURCE")
ORIGINAL_PR_NUMBER=$(echo "$COMMIT_MSG" | grep -oP '#(\d+)' | tail -n1 | cut -c2-)
NEW_COMMIT_MSG="$( echo "${COMMIT_MSG// \(\#$ORIGINAL_PR_NUMBER\)}" | sed -r 's/ \[.+\]//g') [$SUFFIX]"
UPSTREAM_URL="$(git remote get-url upstream)"
if [[ $UPSTREAM_URL == http* ]]; then
  REPO_UPSTREAM="$(echo $UPSTREAM_URL | awk -F'/' '{print $4"/"$5}' | cut -d. -f1)"
else
  REPO_UPSTREAM="$(echo $UPSTREAM_URL | cut -d: -f2 | cut -d. -f1)"
fi

if [ -n "$ORIGINAL_PR_NUMBER" ]; then
  log_info "The backported commit references PR #$ORIGINAL_PR_NUMBER"
fi

if [ "$CONTINUE" = "yes" ]; then
  git cherry-pick --continue
#echo "ignored"
else
  BRANCH_NAME="backport-${SOURCE}-${SUFFIX}"
  if [ -n "$ORIGINAL_PR_NUMBER" ]; then
    BRANCH_NAME="backport-pr-${ORIGINAL_PR_NUMBER}-${SUFFIX}"
  fi
  log_info "Creating new branch $BRANCH_NAME from $TARGET"
  git switch -c "$BRANCH_NAME" "$TARGET"
  log_info "Cherry picking '$COMMIT_MSG'"
  git cherry-pick "$SOURCE" || (log_error "Fix conflict and continue with: $(basename "$0") $* --continue" && exit 1)
fi

log_info "Updating commit message to $NEW_COMMIT_MSG"
git commit --amend -m "$NEW_COMMIT_MSG"

if [ "$LOCAL" = "yes" ]; then
  exit 0
fi

if [ "$CI" = "true" ]; then
  log_info "Pushing $BRANCH_NAME to origin"
  # https://github.com/cli/cli/issues/1718#issuecomment-748292216
  git pull
  git push -u origin HEAD
fi

ORIGINAL_PR_URL="https://github.com/${REPO_UPSTREAM}/pull/${ORIGINAL_PR_NUMBER:-<pr-number>}"
BASE_BRANCH="$SUFFIX"
PR_BODY=$(\cat .github/pull_request_template.md 2>/dev/null || true)
if [ -n "$ORIGINAL_PR_NUMBER" ]; then
  if [ "$CI" = "true" ]; then
    #  --reviewer flag doesn't work with --web
    REVIEWERS=$(gh api repos/"$REPO_UPSTREAM"/pulls/"$ORIGINAL_PR_NUMBER"/reviews | jq '.[] | select(.state == "APPROVED") | .user.login' | jq -c -r -s '. | unique | join(",")')
    if [ -n "$REVIEWERS" ]; then
      REVIEWERS_ARG="--reviewer $REVIEWERS"
    fi
  fi
  PR_BODY=$(gh api repos/$REPO_UPSTREAM/pulls/$ORIGINAL_PR_NUMBER | jq -r '"\n\n" + .body')

  LABELS=$(gh api repos/$REPO_UPSTREAM/pulls/$ORIGINAL_PR_NUMBER | jq '.labels[].name' | jq -c -r -s '. | join(",")')
  if [ -n "$LABELS" ]; then
    LABELS_ARG=(--label "$LABELS")
  fi
fi
log_info "Creating new PR..."
gh pr create --base "$BASE_BRANCH" --title "$NEW_COMMIT_MSG" \
  --body "Backport of $ORIGINAL_PR_URL$(echo -e "\n\n")$PR_BODY" \
  --assignee "${GITHUB_ACTOR:-@me}" $REVIEWERS_ARG "${LABELS_ARG[@]}" --milestone "$SUFFIX" \
  $( [ "$CI" != true ] && echo "--web" )
